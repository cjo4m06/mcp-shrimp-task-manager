name: MCP Shrimp Task Manager Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test-mcp-server:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build server
      run: npm run build
      
    - name: Setup Python for MCP Testing Framework
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install MCP Testing Framework
      run: |
        python -m pip install --upgrade pip
        pip install mcp-testing-framework
        
    - name: Create MCP Server Configuration
      run: |
        # Create configuration file for MCP Testing Framework
        cat > mcp-server-config.json << EOF
        {
          "mcpServers": {
            "shrimp-task-manager": {
              "command": "node",
              "args": ["dist/index.js"],
              "env": {
                "NODE_ENV": "test",
                "LOG_LEVEL": "info"
              }
            }
          }
        }
        EOF
        
    - name: Test MCP Server Connection
      run: |
        # Test basic MCP server connectivity
        mcp-test --test-mcp-servers --test-config mcp-server-config.json --test-timeout 30
        
    - name: Run Functional Tests
      run: |
        # Run functional test suite
        mcp-test --run-test-suite functional --test-config mcp-server-config.json --test-output-format json > functional-results.json
        
    - name: Run Security Tests
      run: |
        # Run security test suite
        mcp-test --run-test-suite security --test-config mcp-server-config.json --test-output-format json > security-results.json
        
    - name: Run Performance Tests
      run: |
        # Run performance test suite
        mcp-test --run-test-suite performance --test-config mcp-server-config.json --test-output-format json > performance-results.json
        
    - name: Generate Test Report
      if: always()
      run: |
        # Generate comprehensive HTML report
        mcp-test --generate-test-report --test-output-format html
        
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          functional-results.json
          security-results.json
          performance-results.json
          test-report.html
          mcp-server-config.json
          
    - name: Upload Test Coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-node-${{ matrix.node-version }}
        path: coverage/

  integration-tests:
    runs-on: ubuntu-latest
    needs: test-mcp-server
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build server
      run: npm run build
      
    - name: Setup Python for MCP Testing Framework
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install MCP Testing Framework
      run: |
        pip install mcp-testing-framework
        
    - name: Run Integration Tests
      run: |
        # Run integration test suite
        mcp-test --run-test-suite integration --test-config mcp-server-config.json --test-output-format json > integration-results.json
        
    - name: Upload Integration Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: integration-results.json
